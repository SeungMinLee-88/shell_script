#!/bin/bash
#${#var}
#문자열 길이 ($var의 문자 갯수). 배열의 경우에, ${#array}라고 하면 배열의 첫번째 요소의 길이를 알려줍니다.
#참고: 예외:
#${#*} 와 ${#@} 는 위치 매개변수의 갯수를 알려줍니다.
#배열에 대해 ${#array[*]} 나 ${#array[@]} 라고 하면 배열 요소의 갯수를 알려줍니다
# 9.4. 변수 타입 지정: declare 나 typeset -a 배열
#pass_warn_age = 7
#pass_max_days = 60
#pass_min_days = 1
#
#
rhelver=$(awk '{ print $4 }' /etc/redhat-release | awk -F. '{ print $1 }')
#rhelver=$(awk '{ print $4 }' /etc/redhat-release)
echo $rhelver
rhelver=7
sh echo.sh
trap 'rm -f targetconfig/vulcheckresult.txt; exit' 1 2 15 24
echo > targetconfig/vulcheckresult.txt
checkresult=targetconfig/vulcheckresult.txt
echo "-------------------------------------SYSTEM VULNERABILITY DETECTED LIST-----------------------------------" > $checkresult
if [ -f ".system-auth_test.swp" ] # $filename 에 빈 칸이 들어 있을 수도 있기 때문에 쿼우팅해줍니다.
then
yes | rm -i targetconfig/.system-auth_test.swp
fi
if [ -f ".pwquality.conf_test.swp" ] # $filename 에 빈 칸이 들어 있을 수도 있기 때문에 쿼우팅해줍니다.
then
yes | rm -i targetconfig/.pwquality.conf_test.swp
fi
if [ -f ".login.defs_test.swp" ] # $filename 에 빈 칸이 들어 있을 수도 있기 때문에 쿼우팅해줍니다.
then
yes | rm -i targetconfig/.login.defs_test.swp
fi

#U-02page vul num 1111111111111111111111111111111111111111111111111111#
chkvalue=
PWCOMPLEXRLT=
PWCOMPLEXLIST=
if [[ rhelver -eq "5" ]]
then
  chkvalue=("retry=3" "minlen=8" "lcredit=-1" "ucredit=-1" "dcredit=-1" "difok=N")
  echo "***************************************OS VERSION : Linux release $rhelver***************************************" >> $checkresult
  echo ${chkvalue[2]}
  element_count=${#chkvalue[@]}
  index=0
  while [ "$index" -lt "$element_count" ]
  do
  #echo ${chkvalue[$index]}
  output=
  ex targetconfig/system-auth_test +/${chkvalue[$index]}/ -s +'p|q!'
  output=$?
  echo "output : "$output
    if [ $output -eq "1" ]
    then
    PWCOMPLEXRLT="PASSWORD COMPLEXITY : DETECTED\n"
    #echo ${chkvalue[$index]} "IS NOT SET" >> $checkresult
    PWCOMPLEXLIST=$PWCOMPLEXLIST"${chkvalue[$index]} IS NOT SET\n"
    elif [ $output -eq "0" ]
    then
    #PWCOMPLEX="PASSWORD COMPLEXITY : UNDETECTED"
    #echo ${chkvalue[$index]} "IS SET" >> $checkresult
    PWCOMPLEXLIST=$PWCOMPLEXLIST"${chkvalue[$index]} IS SET\n"
    fi
  let "index = $index + 1"
  done
    echo "----------------------------------------------------------------------------------------------------------" >> $checkresult
    echo "# U-02 PASSWORD COMPLEXITY" >> $checkresult
    printf "$PWCOMPLEXRLT" >> $checkresult
    printf "$PWCOMPLEXLIST" >> $checkresult
fi
remarkchk=
if [[ rhelver -eq "7" ]]
then
  chkvalue=("retry = 3" "minlen = 8" "lcredit = 1" "ucredit = 1" "dcredit = 1" "difok = N")
  echo "***************************************OS VERSION : Linux release $rhelver***************************************" >> $checkresult
  element_count=${#chkvalue[@]}
  index=0
  while [ "$index" -lt "$element_count" ]
  do
  echo ${chkvalue[$index]}
  output=
  echo "ex targetconfig/pwquality.conf_test +/"${chkvalue[$index]}"/ -s +'p|w|q!' | awk '{ print $1 }'"
  remarkchk=$(ex targetconfig/pwquality.conf_test +/"${chkvalue[$index]}"/ -s +'p|w|q!' | awk '{ print $1 }')
  echo "index : "${chkvalue[$index]}
  output=$?
  echo "output : "$output
    if [ $output -eq "1" ]
    then
    PWCOMPLEXRLT="PASSWORD COMPLEXITY : DETECTED\n"
    #echo ${chkvalue[$index]} "IS NOT SET" >> $checkresult
    PWCOMPLEXLIST=$PWCOMPLEXLIST"${chkvalue[$index]} IS NOT SET\n"
    echo "PWCOMPLEXLIST111 : "$PWCOMPLEXLIST
    elif [[ $output -eq "0" ]]
    then
      if [[ $remarkchk = '#' ]]
      then
        PWCOMPLEXRLT="PASSWORD COMPLEXITY : DETECTED\n"
        #echo ${chkvalue[$index]} "IS NOT SET" >> $checkresult
        PWCOMPLEXLIST=$PWCOMPLEXLIST"${chkvalue[$index]} IS NOT SET\n"

        #echo "PWCOMPLEXLIST222 : "$PWCOMPLEXLIST
      elif [[ $remarkchk != "#" ]]
      then
        #echo ${chkvalue[$index]} "IS SET" >> $checkresult
        PWCOMPLEXLIST=$PWCOMPLEXLIST"${chkvalue[$index]} IS SET\n"
        #echo "PWCOMPLEXLIST : "$PWCOMPLEXLIST
      fi
    fi
  let "index = $index + 1"

  done

    #printf "PRINF_PWCOMPLEXLIST : ""$PWCOMPLEXLIST" >> $checkresult
    echo "----------------------------------------------------------------------------------------------------------" >> $checkresult
    echo "# U-02 PASSWORD COMPLEXITY" >> $checkresult
    printf "$PWCOMPLEXRLT" >> $checkresult
    printf "$PWCOMPLEXLIST" >> $checkresult
fi

#vul num 1111111111111111111111111111111111111111111111111111#

#U-46~48page vul num 2222222222222222222222222222222222222222222222222222#
echo "U-46~48page vul num 2222222222222222222222222222222222222222222222222222"
PWPOLICYRLT=
PWPOLICYLIST=
chkvalue=( "^PASS_MIN_LEN\{0,\}\s\{0,\}[5|9}]" "^PASS_MAX_DAYS\{0,\}\s\{0,\}90" "^PASS_MIN_DAYS\{0,\}\s\{0,\}1")
recordvalue=("PASS_MIN_LEN" "PASS_MAX_DAYS" "PASS_MIN_DAY")
#echo "login.defs check" >> $checkresult
#^PASS_MAX_DAYS\{0,\}\s\{0,\}90
element_count=${#chkvalue[@]}
index=0
while [ "$index" -lt "$element_count" ]
do
#echo ${chkvalue[$index]}
output=
echo "ex targetconfig/login.defs_test +/\"${chkvalue[$index]}\"/ -s +'p|q!'"
ex targetconfig/login.defs_test +/"${chkvalue[$index]}"/ -s +'p|q!'
output=$?
remarkchk=$(ex targetconfig/login.defs_test +/"${chkvalue[$index]}"/ -s +'p|q!' | awk '{ print $1 }')
echo "output : "$output
echo "remarkchk : "$remarkchk
    if [ $output -eq "1" ]
    then
    PWPOLICYRLT="PASSWORD POLICY : DETECTED\n"
    #echo ${chkvalue[$index]} "is not set" >> $checkresult
    PWPOLICYLIST=$PWPOLICYLIST"${recordvalue[$index]} IS NOT SET\n"
    elif [[ $output -eq "0" ]]
    then
        echo "undected!!!"
        if [[ $remarkchk == '#' ]]
        then
            PWPOLICYRLT="PASSWORD POLICY : DETECTED\n"
            PWPOLICYLIST=$PWPOLICYLIST"${recordvalue[$index]} IS NOT SET\n"
        elif [[ $remarkchk != "#" ]]
        then
            PWPOLICYRLT="PASSWORD POLICY : UNTECTED\n"
            PWPOLICYLIST=$PWPOLICYLIST"${recordvalue[$index]} IS SET\n"
        fi
    fi
let "index = $index + 1"
done
    echo "# U-46/47/48 PASSWORD POLICY" >> $checkresult
    printf "$PWPOLICYRLT" >> $checkresult
    printf "$PWPOLICYLIST" >> $checkresult
#vul num 2222222222222222222222222222222222222222222222222222#


#U03 pagevul num 3333333333333333333333333333333333333333333333333333#
echo "# U-03 ACCOUNT LOCK POLICY" >> $checkresult
ACCLOCKRLT=
ACCLOCKLIST=
chkvalue=("pam_tally2.so" "deny=5" "unlock_time=60" "no_magic_root" "reset")

echo ${chkvalue[2]}
element_count=${#chkvalue[@]}
index=0
while [ "$index" -lt "$element_count" ]
do
#echo ${chkvalue[$index]}
output=
#ex /etc/pam.d/system-auth +/"${chkvalue[$index]}"/ -s +'p|q!'
ex targetconfig/system-auth +/"${chkvalue[$index]}"/ -s +'p|q!'
output=$?
echo "output : "$output
  if [ $output -eq "1" ]
  then
  #echo "${chkvalue[$index]}" "is not set" >> $checkresult
  ACCLOCKRLT="ACCOUNT LOCK POLICY : DETECTED\n"
  ACCLOCKLIST=$ACCLOCKLIST"${chkvalue[$index]} IS NOT SET\n"
  elif [ $output -eq "0" ]
  then
  #echo "${chkvalue[$index]}" "is set" >> $checkresult
  ACCLOCKRLT="ACCOUNT LOCK POLICY : UNDETECTED\n"
  ACCLOCKLIST=$ACCLOCKLIST"${chkvalue[$index]} IS SET\n"
  fi
let "index = $index + 1"
done
    printf "$ACCLOCKRLT" >> $checkresult
    printf "$ACCLOCKLIST" >> $checkresult
#vul num 3333333333333333333333333333333333333333333333333333#



#U04page vul num 4444444444444444444444444444444444444444444444444444 use awk#
echo "# U-04 PASSWD FILE CONFIG" >> $checkresult
ROOTSHADOW=targetconfig/shadow_test
#cat $ROOTSHADOW
if [ -f "$ROOTSHADOW" ] # $filename 에 빈 칸이 들어 있을 수도 있기 때문에 쿼우팅해줍니다.
then
  echo "SHADOW FILE : UNDECTECTED" >> $checkresult
else
  echo "SHADOW FILE : DECTECTED" >> $checkresult
fi
#file=/etc/passwd
file=targetconfig/passwd_test
PASSENCRLT="USER PASSWORD ENCRYPT : UNDECTECTED\n"
PASSENCLIST=
while read word
do
#echo "word : "  $word
USERFIELD=$(echo $word | awk -F: '{ print $1 }')
SECONDFIELD=$(echo $word | awk -F: '{ print $2 }')
#echo "SECONDFIELD : "$SECONDFIELD

    if [[ $SECONDFIELD != "x" ]]
    then
        PASSENCRLT="USER PASSWORD ENCRYPT : DECTECTED\n"
        #echo "PASSWORD ENCRYPT : DECTECTED" >> $checkresult
        PASSENCLIST=$PASSENCLIST"USER \" $USERFIELD \" PASSWORD IS NOT ENCRYPT(SECONDFILE :$SECONDFIELD)\n"
    fi

done <"$file"
    printf "$PASSENCRLT" >> $checkresult
    printf "$PASSENCLIST" >> $checkresult
#vul num 4444444444444444444444444444444444444444444444444444 use awk#


#U-16page vul num 5555555555555555555555555555555555555555555555555555 use sed#
#rootprofile=/root/.profile
rootprofile=targetconfig/.profile

#etcprofile=/etc/profile
etcprofile=targetconfig/profile
echo "U-16 PROFILE ENVIRONMENT" >> $checkresult
if [ -f $rootprofile ] # $filename 에 빈 칸이 들어 있을 수도 있기 때문에 쿼우팅해줍니다.
then
  #echo "root's profile is exits"
  chkrootprofile=$(sed -n '/\.:/p' $rootprofile)
  if [[ -n $chkrootprofile ]]
  then
    echo "ROOT PROFILE : VULNERABILITY" >> $checkresult
  fi
else
  echo "ROOT PROFILE : NOT EXITS"
fi

if [ -f $etcprofile ] # $ search file content /usr/local/sbin:/sbin:/usr/sbin:/bin:/usr/bin:/usr/bin/X11:/usr/local/bin:/usr/bin:/usr/X11R6/bin:/root/bin
then
  echo "GLOBAL PROFILE IS EXITS"
  chkrootprofile=$(sed -n '/\.:/p' $etcprofile)
  echo "chkrootprofile" $chkrootprofile
  if [[ -z $chkrootprofile ]]
  then
    echo "GLOBAL PROFILE VULNERABILITY : UNDECTECTED" >> $checkresult
  elif [[ -n $chkrootprofile ]]
  then
      echo "GLOBAL PROFILE VULNERABILITY : DECTECTED" >> $checkresult
  fi
else
  echo "GLOBAL PROFILE : NOT EXITS"
fi

#vul num 5555555555555555555555555555555555555555555555555555 use sed#



#U18,19 page vul num 6666666666666666666666666666666666666666666666666666 use awk#
#search content ls -l /etc/passwd#
# fix chmod#
echo "U-18/19 USER FILE PERMISSION" >> $checkresult
passwdchkval=($(stat -c "%a %U %n" ~/targetconfig/passwd_test))
shadowchkval=($(stat -c "%a %U %n" ~/targetconfig/shadow_test))
echo "passwdchkval : "${passwdchkval[0]}
echo "passwdchkval2 : "${passwdchkval[1]}
echo "passwdchkval : "${passwdchkval[2]}
echo "shadowchkval : "${shadowchkval[0]}
echo "shadowchkval : "${shadowchkval[1]}
echo "shadowchkval : "${shadowchkval[2]}
if [[ ${passwdchkval[0]} -gt "644" || ${passwdchkval[1]} != "root" ]]
then
  echo ${passwdchkval[2]} "IS LEAK" >> $checkresult
fi
if [[ ${shadowchkval[0]} -gt "400" || ${shadowchkval[1]} != "root" ]]
then
  echo ${shadowchkval[2]} "IS LEAK" >> $checkresult
fi

#vul num 6666666666666666666666666666666666666666666666666666 use awk#

#U24 page vul num 7777777777777777777777777777777777777777 use awk#

echo "U-24 SID, SGID, STICKY BIT" >> $checkresult
cd targetconfig/sidchktarget/
stat -c "%a %U %n" * | while read line
do
  #pwd
  #echo $line
  #chkval=$(echo $line | awk '{ print $1 }')
  #echo "chkval : "$chkval
  #echo "expr length echo $line | awk '{ print " "$1" " }'"
  PERMISSIONLENGTH=$(expr length $(echo $line | awk '{ print $1 }'))
  CHKFILE=$(echo $line | awk '{ print $3 }')
  echo "$CHKFILE's PERMISSIONLENGTH : "$PERMISSIONLENGTH
    if [[ $PERMISSIONLENGTH -ge "4" ]]
    then
      sid=$(expr substr $PERMISSIONLENGTH 1 1)
      #echo "sid : "$sid
      echo $CHKFILE " FILE IS LEAK" >> ~/$checkresult
    fi
done
#U18,19 page vul num 7777777777777777777777777777777777777777 use awk#

#U17 pagevul num 8888888888888888888888888888888888888888888888888888 use find#
cd
echo "U-17 NO OWNER" >> $checkresult
while read line
do
  echo $line "FILE HAS NO OWNER" >> $checkresult
done < <(find /root/targetconfig/ -nouser -not -path "/root/targetconfig/nousertarget/opt/*" -not -path "/root/targetconfig/nousertarget/var/lib/docker/*" 2>/dev/null)
#vul num 8888888888888888888888888888888888888888888888888888 use find#
